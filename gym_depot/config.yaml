# entrance:
bus_num: 27
random: True                      # if True: random initial state
seed: 71                           # when random is False

# request:
req_order: [0, 1, 2]              # 0: ent, 1: cs, 2: fs

# Employee:
emp_num: 3  # int/false

# CS:
cs_num: 27
fast_cs_num: 4              # fast CS (first indexes of cs)
interlock: 22               # of regular CS
charge_time: 3                 # time (in minutes) needed to charge to the next level (must be int in time steps)
fast_charge_time: 2             # in minutes
charge_total: 300               # total charge time in minutes (must be 0 to use level time)
fast_charge_total: 200          # total fast charge time in minutes (must be 0 to use level time)

# FS:
fs_num: 2
fuel_time: 0.1                     # time needed to fuel (in minutes) to the next level (must be int in time steps)
fuel_total: 10                     # total fuel time in minutes (must be 0 to use level time)

# levels
level_num: 101                      # must be higher than 2 (i.e 101 corresponds to 100 levels)

# time:   (in minutes)
min_to_ts: 10                     # number of time steps in a minute
min_duration: 360                  # min number of time gap (in minutes) between first and last arriving bus
max_duration: 600                # max duration
bus_time: 0.1                       # number of time gap (in minutes) between two simultaneously arrived buses
time_delay: 1          # 1 for eval           # number of time steps considered as delay
travel_time: [[0.7, 0.7, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.9, 0.8],  # ENT to a station
              [0.6, 0.6, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6],        # FS1 to CS
              [0.8, 0.8, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8],        # FS2 to CS
              [0.1]]    # CS to CS (only interlock)
emp_time:   [[0.9, 0.8, 0.7, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.6, 0.7, 0.6, 0.7, 0.6, 0.7, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.8, 0.8, 0.9, 0.9, 0.9, 0.5, 0.7], # emp travel from SB to a station
              [1.0, 0.9, 0.8, 0.7, 0.6, 0.7, 0.6, 0.7, 0.6, 0.7, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.9, 0.9, 1.0, 1.0, 1.0],      # emp travel from FS1 to a CS
              [1.2, 1.1, 1, 0.9, 0.6, 0.7, 0.6, 0.7, 0.6, 0.7, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 1, 1, 1, 1.1, 1.1],      # emp travel from FS2 to a CS
              [0.6, 0.6]]      # emp travel FS TO FS, average CS TO CS

# reward:
inst: 0                                 # 0 for evaluation
fail: -100
win: 3000
waiting_limit: 0                    # max total waiting time till the next request (in minutes), if exceeded: fail
repeat: 0
repeat_per_action: 0

# render fps:
render_reset: 1
render_fast: 100
render_slow: 0.2                # if fail or success

# training:
sb3_model: MPPO                  # MaskablePPO = MPPO
mask: True                      # must be false unless model is MPPO (=PPO without mask)
training: 'training12/'
ent_coef: 0
models_dir: 'models/'
logs_dir: 'logs/'
checkpoint: ''                  # resume training
device: cpu
tr_render: true
total_steps: 26          # * ten-thousand steps

# evaluation:
model_path_ev: 'models/training13/MPPO-1694899674/5000000'    # model path or name of rule based models
ev_mask: True                                              # must be false unless model is MPPO
results_dir: 'results/'
episode_num: 1000
iteration_num: 2
save_graph: false
show_graph: false
ev_render: false

# no_valid_action handling: can ONLY be used for training and evaluation of MPPO
check_mask: true